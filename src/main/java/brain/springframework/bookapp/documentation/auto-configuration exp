Configuration is a
central element of the Spring Framework, and there must be something that tells
Spring how to run your application.
 When you add Spring Boot to your application, there’s a JAR file named springboot-autoconfigure that contains several configuration classes. Every one of these configuration classes is available on the application’s classpath and has the opportunity to
contribute to the configuration of your application. There’s configuration for Thymeleaf, configuration for Spring Data JPA, configuration for Spring MVC, and configuration for dozens of other things you might or might not want to take advantage of in
your Spring application.
 What makes all of this configuration special, however, is that it leverages Spring’s
support for conditional configuration, which was introduced in Spring 4.0. Conditional configuration allows for configuration to be available in an application, but to
be ignored unless certain conditions are met.
 It’s easy enough to write your own conditions in Spring. All you have to do is
implement the Condition interface and override its matches() method. For example, the following simple condition class will only pass if JdbcTemplate is available
on the classpath:
package readinglist;
import org.springframework.context.annotation.Condition;
import org.springframework.context.annotation.ConditionContext;
import org.springframework.core.type.AnnotatedTypeMetadata;
public class JdbcTemplateCondition implements Condition {
@Override
public boolean matches(ConditionContext context,
AnnotatedTypeMetadata metadata) {
try {
context.getClassLoader().loadClass(
"org.springframework.jdbc.core.JdbcTemplate");
return true;
} catch (Exception e) {
return false;
}
}



 Although the condition shown here is rather simple, Spring Boot defines several
more interesting conditions and applies them to the configuration classes that make
up Spring Boot auto-configuration. Spring Boot applies conditional configuration by
defining several special conditional annotations and using them in its configuration
classes. Table 2.1 lists the conditional annotations that Spring Boot provides.
Generally, you shouldn’t ever need to look at the source code for Spring Boot’s autoconfiguration classes. But as an illustration of how the annotations in table 2.1 are
used, consider this excerpt from DataSourceAutoConfiguration (provided as part of
Spring Boot’s auto-configuration library):
@Configuration
@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class })
@EnableConfigurationProperties(DataSourceProperties.class)
Table 2.1 Conditional annotations used in auto-configuration
Conditional annotation Configuration applied if…?
@ConditionalOnBean …the specified bean has been configured
@ConditionalOnMissingBean …the specified bean has not already been configured
@ConditionalOnClass …the specified class is available on the classpath
@ConditionalOnMissingClass …the specified class is not available on the classpath
@ConditionalOnExpression …the given Spring Expression Language (SpEL) expression evaluates to true
@ConditionalOnJava …the version of Java matches a specific value or range
of versions
@ConditionalOnJndi …there is a JNDI InitialContext available and
optionally given JNDI locations exist
@ConditionalOnProperty …the specified configuration property has a specific value
@ConditionalOnResource …the specified resource is available on the classpath
@ConditionalOnWebApplication …the application is a web application
@ConditionalOnNotWebApplication …the application is not a web application




■ Because H2 is on the classpath, an embedded H2 database bean will be created.
This bean is of type javax.sql.DataSource, which the JPA implementation
(Hibernate) will need to access the database.
■ Because Hibernate Entity Manager is on the classpath (transitively via Spring
Data JPA), auto-configuration will configure beans needed to support working
with Hibernate, including Spring’s LocalContainerEntityManagerFactoryBean and JpaVendorAdapter.
■ Because Spring Data JPA is on the classpath, Spring Data JPA will be configured
to automatically create repository implementations from repository interfaces.
■ Because Thymeleaf is on the classpath, Thymeleaf will be configured as a view
option for Spring MVC, including a Thymeleaf template resolver, template
engine, and view resolver. The template resolver is configured to resolve templates from /templates relative to the root of the classpath.
■ Because Spring MVC is on the classpath (thanks to the web starter dependency), Spring’s DispatcherServlet will be configured and Spring MVC will be
enabled.
■ Because this is a Spring MVC web application, a resource handler will be registered to serve static content from /static relative to the root of the classpath.
(The resource handler will also serve static content from /public, /resources,
and /META-INF/resources).
■ Because Tomcat is on the classpath (transitively referred to by the web starter
dependency), an embedded Tomcat container will be started to listen on port 8080.
The main takeaway here, though, is that Spring Boot auto-configuration takes on the
burden of configuring Spring so that you can focus on writing your application.